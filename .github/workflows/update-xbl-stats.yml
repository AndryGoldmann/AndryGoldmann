name: Update XBL Stats

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write  # Grants GITHUB_TOKEN write access for pushes

jobs:
  build:
    name: Update-XBL-stats
    runs-on: ubuntu-latest
    env:
      XBL_API_KEY: ${{ secrets.XBL_API_KEY }}
      XBL_XUID: ${{ secrets.XBL_XUID }}

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go
      - name: Check out repo
        uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Build XBL updater
        run: |-
          cat > main.go << 'EOF'
          package main

          import (
          	"encoding/json"
          	"fmt"
          	"io"
          	"net/http"
          	"os"
          	"regexp"
          	"strconv"
          	"strings"
          )

          type Profile struct {
          	Id         string `json:"id"`
          	Gamertag   string `json:"gamertag"`
          	Gamerscore string `json:"gamerscore"`
          	Gamerpic   string `json:"gamerPic"`
          }

          type ActivityItem struct {
          	TitleAssociations []struct {
          		Name string `json:"name"`
          	} `json:"titleAssociations"`
          }

          type RecentActivity struct {
          	Items []ActivityItem `json:"items"`
          }

          func main() {
          	xblKey := os.Getenv("XBL_API_KEY")
          	xuid := os.Getenv("XBL_XUID")
          	if xblKey == "" || xuid == "" {
          		fmt.Println("Missing XBL_API_KEY or XBL_XUID env vars")
          		os.Exit(1)
          	}

          	client := &http.Client{}

          	// Fetch profile
          	req, _ := http.NewRequest("GET", fmt.Sprintf("https://xbl.io/api/v2/account/%s", xuid), nil)
          	req.Header.Set("X-Authorization", xblKey)
          	resp, err := client.Do(req)
          	if err != nil {
          		fmt.Printf("XBL: Error fetching profile: %v\n", err)
          		os.Exit(1)
          	}
          	defer resp.Body.Close()
          	if resp.StatusCode != 200 {
          		body, _ := io.ReadAll(resp.Body)
          		fmt.Printf("XBL: Profile API error %d: %s\n", resp.StatusCode, string(body))
          		os.Exit(1)
          	}
          	profileBody, _ := io.ReadAll(resp.Body)
          	fmt.Println("DEBUG - Profile JSON:", string(profileBody))  // Debug print
          	var profile Profile
          	if err := json.Unmarshal(profileBody, &profile); err != nil {
          		fmt.Printf("XBL: Error parsing profile: %v\n", err)
          		os.Exit(1)
          	}
          	fmt.Printf("DEBUG - Parsed Gamertag: %s, Gamerscore: %s, Gamerpic: %s\n", profile.Gamertag, profile.Gamerscore, profile.Gamerpic)
          	gamerscore, err := strconv.Atoi(profile.Gamerscore)
          	if err != nil {
          		gamerscore = 0
          		fmt.Printf("XBL: Error parsing gamerscore: %v\n", err)
          	}

          	// Fetch recent activity
          	req2, _ := http.NewRequest("GET", fmt.Sprintf("https://xbl.io/api/v2/%s/activity/recent", xuid), nil)
          	req2.Header.Set("X-Authorization", xblKey)
          	resp2, err := client.Do(req2)
          	var recent RecentActivity
          	if err == nil && resp2.StatusCode == 200 {
          		defer resp2.Body.Close()
          		recentBody, _ := io.ReadAll(resp2.Body)
          		fmt.Println("DEBUG - Recent Activity JSON:", string(recentBody))  // Debug print
          		if err := json.Unmarshal(recentBody, &recent); err != nil {
          			fmt.Printf("XBL: Error parsing recent activity: %v\n", err)
          		}
          	} else if err != nil {
          		fmt.Printf("XBL: Error fetching recent activity: %v\n", err)
          	} else {
          		fmt.Printf("XBL: Recent activity API error %d\n", resp2.StatusCode)
          	}

          	// Collect recent games (first 5 unique)
          	games := make(map[string]bool)
          	var gameList []string
          	count := 0
          	for _, item := range recent.Items {
          		if count >= 5 {
          			break
          		}
          		for _, title := range item.TitleAssociations {
          			if !games[title.Name] {
          				games[title.Name] = true
          				gameList = append(gameList, fmt.Sprintf("- %s", title.Name))
          				count++
          				if count >= 5 {
          					break
          				}
          			}
          		}
          	}

          	gamesStr := strings.Join(gameList, "\n")

          	// Format stats section
          	stats := fmt.Sprintf("### Xbox Live Stats\n![Avatar](%s)\n**Gamerscore:** %d\n**Gamertag:** %s\n\n**Recent Games:**\n%s", profile.Gamerpic, gamerscore, profile.Gamertag, gamesStr)

          	// Read README.md
          	readme, err := os.ReadFile("README.md")
          	if err != nil {
          		fmt.Printf("XBL: Error reading README: %v\n", err)
          		os.Exit(1)
          	}
          	str := string(readme)

          	// Replace between markers
          	re := regexp.MustCompile(`(?s)<!-- XBL_STATS -->.*?<!-- /XBL_STATS -->`)
          	newStr := re.ReplaceAllString(str, `<!-- XBL_STATS -->`+strings.TrimSpace(stats)+`<!-- /XBL_STATS -->`)

          	// Write back
          	if err := os.WriteFile("README.md", []byte(newStr), 0644); err != nil {
          		fmt.Printf("XBL: Error writing README: %v\n", err)
          		os.Exit(1)
          	}

          	fmt.Println("XBL: README updated with XBL stats!")
          }
          EOF
          go mod init xbl-updater
          go mod tidy
          go build -o xbl main.go
          rm -f main.go go.mod go.sum
      - name: Update README with XBL stats
        run: ./xbl
      - name: Commit and push
        run: |-
          git config --global user.email "bot@github.com" && git config --global user.name "XBL-Bot"
          git config --global pull.rebase false
          git diff
          git add README.md && git commit -m "Update XBL stats" || exit 0
          git pull && git push
